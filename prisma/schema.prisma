generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_items {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id        String         @db.Uuid
  shop_product_id String?        @db.Uuid
  product_name    String         @db.VarChar(255)
  quantity        Int
  unit_price      Decimal        @db.Decimal(10, 2)
  total_price     Decimal?       @default(dbgenerated("((quantity)::numeric * unit_price)")) @db.Decimal(10, 2)
  orders          orders         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shop_products   shop_products? @relation(fields: [shop_product_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_number        String           @unique @db.VarChar(50)
  buyer_id            String           @db.Uuid
  shop_id             String           @db.Uuid
  total_amount        Decimal          @db.Decimal(10, 2)
  status              String?          @default("PENDING") @db.VarChar(30)
  delivery_address_id String?          @db.Uuid
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at          DateTime?        @default(now()) @db.Timestamp(6)
  order_items         order_items[]
  order_messages      order_messages[]
  users               users            @relation(fields: [buyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_addresses      user_addresses?  @relation(fields: [delivery_address_id], references: [id], onUpdate: NoAction)
  shops               shops            @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payments            payments[]
  reviews             reviews[]

  @@index([buyer_id], map: "idx_orders_buyer_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id          String    @db.Uuid
  payment_method    String    @db.VarChar(50)
  provider          String?   @db.VarChar(100)
  amount            Decimal   @db.Decimal(10, 2)
  status            String?   @default("PENDING") @db.VarChar(30)
  transaction_id    String?   @db.VarChar(255)
  payment_reference String?   @db.VarChar(255)
  customer_phone    String?   @db.VarChar(20)
  raw_response      Json?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  orders            orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_id], map: "idx_payments_order_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model products {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(255)
  brand         String?         @db.VarChar(100)
  description   String?
  category_id   String?         @db.Uuid
  base_price    Decimal?        @db.Decimal(10, 2)
  images        String[]
  is_active     Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  categories    categories?     @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  reviews       reviews[]
  shop_products shop_products[]

  @@index([name], map: "idx_products_name")
}

model shops {
  id                       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id                 String?         @db.Uuid
  name                     String          @db.VarChar(255)
  description              String?
  business_registration_no String?         @db.VarChar(100)
  address_line1            String?         @db.VarChar(255)
  city                     String?         @db.VarChar(100)
  latitude                 Decimal?        @db.Decimal(10, 6)
  longitude                Decimal?        @db.Decimal(10, 6)
  phone                    String?         @db.VarChar(20)
  email                    String?         @db.VarChar(255)
  is_verified              Boolean?        @default(false)
  delivery_enabled         Boolean?        @default(true)
  created_at               DateTime?       @default(now()) @db.Timestamp(6)
  updated_at               DateTime?       @default(now()) @db.Timestamp(6)
  orders                   orders[]
  reviews                  reviews[]
  shop_products            shop_products[]
  users                    users?          @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model user_addresses {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  contact_name  String    @db.VarChar(255)
  address_line1 String    @db.VarChar(255)
  city          String    @db.VarChar(100)
  country       String?   @default("Malawi") @db.VarChar(100)
  latitude      Decimal?  @db.Decimal(10, 6)
  longitude     Decimal?  @db.Decimal(10, 6)
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  orders        orders[]
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name      String           @db.VarChar(150)
  email          String           @unique @db.VarChar(255)
  phone_number   String?          @db.VarChar(20)
  password_hash  String           @db.VarChar(255)
  role           String           @default("CUSTOMER") @db.VarChar(20)
  profile_image  String?
  is_active      Boolean          @default(true)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  orders         orders[]
  reviews        reviews[]
  shops          shops[]
  user_addresses user_addresses[]

  @@index([email], map: "idx_users_email")
}

model categories {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @unique @db.VarChar(100)
  description String?
  is_active   Boolean?   @default(true)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  products    products[]
}

model order_messages {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id       String    @db.Uuid
  recipient_type String    @db.VarChar(20)
  message_type   String    @db.VarChar(50)
  subject        String?   @db.VarChar(255)
  body           String
  is_sent        Boolean?  @default(false)
  sent_at        DateTime? @db.Timestamp(6)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  orders         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id    String?   @db.Uuid
  reviewer_id String    @db.Uuid
  shop_id     String    @db.Uuid
  product_id  String    @db.Uuid
  rating      Int?
  comment     String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  orders      orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [reviewer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shops       shops     @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model shop_products {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shop_id           String              @db.Uuid
  product_id        String              @db.Uuid
  price             Decimal             @db.Decimal(10, 2)
  stock_quantity    Int
  condition         String?             @default("NEW") @db.VarChar(20)
  specs             Json?
  images            String[]
  is_available      Boolean?            @default(true)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  order_items       order_items[]
  products          products            @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shops             shops               @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shop_products_log shop_products_log[]

  @@index([shop_id], map: "idx_shop_products_shop_id")
}

model shop_products_log {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shop_product_id String        @db.Uuid
  change_qty      Int
  change_type     String        @db.VarChar(50)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  shop_products   shop_products @relation(fields: [shop_product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum address_type {
  HOME
  WORK
  BILLING
  PICKUP_POINT
}

enum delivery_status {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

enum message_channel {
  EMAIL
  SMS
  PUSH
}

enum order_status {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum payment_status {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum payout_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum product_condition {
  NEW
  REFURBISHED
  USED_LIKE_NEW
  USED_GOOD
  USED_FAIR
}

enum recipient_type {
  CUSTOMER
  SHOP
}

enum user_role {
  USER
  SELLER
  ADMIN
  SUPER_ADMIN
}
